{"version":3,"sources":["components/Counter.js","components/Header.js","components/Footer.js","hooks/FetchRequest.js","views/Home.js","views/Pod.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","useState","year","setYear","className","onClick","prevYear","Header","to","Footer","href","useAxiosGet","url","loading","data","error","request","setRequest","useEffect","axios","get","then","res","catch","err","Home","spacePOD","process","content","renderPOD","filter","POD","media_type","map","date","src","alt","title","useParams","copyright","explanation","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5634a523.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\n// This is a counter that uses useState. I have grand ideas that you should be able to change the year and the images on the home page using this, but haven't gotten it to work yet and feel it may be a little bit too much for this particular guide return. Maybe in the future? But for now it's just a little novelty in the header...\nfunction Counter() {\n    const [year, setYear] = useState(2019)\n    \n    if (year === 2021) {\n        setYear(2000)\n    }\n\n    return (\n        <h1 className=\"counter\" onClick={() => setYear(prevYear => prevYear + 1)}>{year}</h1>\n    )\n}\n\nexport default Counter","import React from 'react'\nimport Counter from './Counter'\nimport { Link } from 'react-router-dom'\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <Link to={`/`}><h1 className=\"title\">Space<span className=\"accentcolor\">:</span></h1></Link>\n            <Counter />\n        </header>\n    )\n}\n\nexport default Header","import React from 'react'\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <p><a href=\"https://api.nasa.gov/\">NASA</a> <span className=\"accentcolor\">â™¥</span> space</p>\n        </footer>\n    )\n}\n\nexport default Footer","import { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n// Reusable custom hook that uses axios to fetch data from an API\nexport function useAxiosGet(url) {\n    const [request, setRequest] = useState({\n        loading: false,\n        data: null,\n        error: false\n    })\n\n    // useEffect runs only once for each change of the URL\n    useEffect(() => {\n        setRequest({\n            loading: true,\n            data: null,\n            error: false\n        })\n        axios.get(url)\n            .then(res => {\n                setRequest({\n                    loading: false,\n                    data: res.data,\n                    error: false,\n                })\n            })\n            .catch(err => {\n                setRequest({\n                    loading: false,\n                    data: null,\n                    error: true\n                })\n            })\n        \n    }, [url])\n\n    return request\n}","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { useAxiosGet } from '../hooks/FetchRequest'\n\n// Imports CSS from CSS Module\nimport './Home.css'\n\nfunction Home() {\n    // API Key hidden from Github and added to apiURL\n    const api_key = process.env.REACT_APP_API_KEY\n    const apiURL = `https://api.nasa.gov/planetary/apod?start_date=2019-01-01&end_date=2019-12-31&api_key=${api_key}`\n    // const apiURL = `https://api.nasa.gov/planetary/apod?start_date=2019-01-01&end_date=2019-01-31&api_key=${api_key}`\n\n    // Calling on a custom hook (found in hooks/FetchRequest.js) that takes in the apiURL parameter and gives us an object with loading, error and data information\n    const spacePOD = useAxiosGet(apiURL)\n    let content = null\n\n    // Showing loading tag\n    if(spacePOD.loading) {\n        content = <div className=\"centered\"><h2>Loading...</h2></div>\n    }\n    \n    // Shows on error\n    if(spacePOD.error) {\n        content = <div className=\"centered\"><h2>Error</h2></div>\n    }\n\n    // If the data has been loaded, then do something with it :)\n    if(spacePOD.data) {\n        \n        // filters through the array finding images (some days are videos, but I couldn't get the API functioning with thumbnails) and then mapping each relevant object with some HTML\n        const renderPOD = spacePOD.data\n            .filter(POD => POD.media_type === 'image')\n            .map((POD) =>\n            <div className=\"img-container\" key={POD.date}>\n                {/* Each picture is a link to more info about the picture of the day, using the POD.date as a path */}\n                <Link to={`/pod/${POD.date}`}>\n                    <img className=\"pod-img\" src={POD.url} alt={POD.title} />\n                    <div className=\"pod-overlay\"><h3>{POD.date}</h3></div>\n                </Link>\n            </div>\n        )\n\n        // Adding the newly rendered POD to the content variable\n        content = <div className=\"image-grid\">{renderPOD}</div>\n    }\n\n    // Returning the content\n    return (\n        <div className=\"main\">\n            {content}\n        </div>\n    )\n}\n\n// Exporting the Home view\nexport default Home","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useAxiosGet } from '../hooks/FetchRequest'\n\n// Imports CSS from CSS Module\nimport './Pod.css'\n\nfunction POD() {\n    const api_key = process.env.REACT_APP_API_KEY\n\n    // This takes the parameters of the link (in this case, the date element) and adds it to the apiURL to fetch the correct data\n    const { date } = useParams()\n    const apiURL = `https://api.nasa.gov/planetary/apod?date=${date}&api_key=${api_key}`\n\n    const spacePOD = useAxiosGet(apiURL)\n    let content = null\n\n    if(spacePOD.loading) {\n        content = <div className=\"centered\"><h2>Loading...</h2></div>\n    }\n    \n    if(spacePOD.error) {\n        content = <div className=\"centered\"><h2>Error</h2></div>\n    }\n\n    // Creates the HTML using data from the API\n    if(spacePOD.data) {\n        content =  \n            <div className=\"pod__container\">\n                <div className=\"pod__img\">\n                    <img src={spacePOD.data.url} alt={spacePOD.data.title} />\n                </div>\n                <div className=\"pod__info\">\n                    <h2 className=\"pod__title\">{spacePOD.data.title}</h2>\n                    <h4 className=\"pod__copyright\">{spacePOD.data.copyright}</h4>\n                    <p className=\"pod__text\">{spacePOD.data.explanation}</p>\n                </div>\n            </div>\n    }\n\n    return (\n        <main className=\"main\">\n            {content}\n        </main>\n    )\n}\n\nexport default POD","import './App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\n//Importing components\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\n//Importing views\nimport Home from './views/Home'\nimport POD from './views/Pod'\n\n\n// This is my SPA, the header and footer stay constant, but the main tag encompasses the changing views, or the switches.\nfunction App() {\n\n  return ( \n    <div className=\"app\">\n      <Router>\n        <Header />\n        <main className=\"main\">\n          <Switch>\n            {/* Links to the home view, needs to have the \"exact\" keyword because otherwise the home view will show for any path, not just the root / */}\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            {/* This is a route with a wildcard parameter, links to the POD view and takes in the date from the selected picture to render more information about the photo as provided by the API */}\n            <Route path=\"/pod/:date\">\n              <POD />\n            </Route>\n          </Switch>\n        </main>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}